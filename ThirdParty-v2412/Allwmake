#!/bin/sh
#------------------------------------------------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     |
#   \\  /    A nd           | www.openfoam.com
#    \\/     M anipulation  |
#------------------------------------------------------------------------------
#     Copyright (C) 2011-2016 OpenFOAM Foundation
#     Copyright (C) 2016-2023 OpenCFD Ltd.
#------------------------------------------------------------------------------
# License
#     This file is part of OpenFOAM, distributed under GPL-3.0-or-later.
#
# Script
#     ThirdParty Allwmake
#
# Description
#     Build script for ThirdParty applications/libraries
#
# ----------------------------------------------
# NO USER-CONFIGURABLE SETTINGS WITHIN THIS FILE
#------------------------------------------------------------------------------
# Run from third-party directory only
cd "${0%/*}" || exit
wmakeCheckPwd "$WM_THIRD_PARTY_DIR" 2>/dev/null || {
    echo "Error (${0##*/}) : not located in \$WM_THIRD_PARTY_DIR"
    echo "    Check your OpenFOAM environment and installation"
    exit 1
}
. "${WM_THIRD_PARTY_DIR:?}"/etc/tools/ThirdPartyFunctions
#------------------------------------------------------------------------------
# Force GCC for ThirdParty when WM_THIRDPARTY_USE_GCC is set
if [ "$WM_THIRDPARTY_USE_GCC" = "true" ]
then
    echo "Using GCC for ThirdParty libraries (WM_THIRDPARTY_USE_GCC=true)"
    useGcc
    # Clean environment from NVCC-specific variables
    unset WM_GPU_ARCH
    unset cuFLAGS
    # Clean CMAKE variables that might contain NVCC flags
    unset CMAKE_C_FLAGS
    unset CMAKE_CXX_FLAGS
    # Force direct GCC usage, bypass wmake compiler detection
    export CC="gcc"
    export CXX="g++"
    # Clean CFLAGS and CXXFLAGS from NVCC-specific options
    export CFLAGS="-m64 -fPIC -O3"
    export CXXFLAGS="-m64 -fPIC -O3 -std=c++14"
    # Set clean CMAKE flags and force CMAKE to use GCC
    export CMAKE_C_COMPILER="gcc"
    export CMAKE_CXX_COMPILER="g++"
    export CMAKE_C_FLAGS="-m64 -fPIC -O3"
    export CMAKE_CXX_FLAGS="-m64 -fPIC -O3 -std=c++14"
    # Force CMake to use absolute paths to bypass wmake compiler detection
    export CMAKE_C_COMPILER="/usr/bin/gcc"
    export CMAKE_CXX_COMPILER="/usr/bin/g++"
    # Also update build directories to use GCC paths
    buildBASE="$WM_THIRD_PARTY_DIR/build/${WM_ARCH}Gcc"
    installBASE="$WM_THIRD_PARTY_DIR/platforms/${WM_ARCH}Gcc"
    echo "ThirdParty environment: CC=$CC, CXX=$CXX"
    echo "ThirdParty CFLAGS: $CFLAGS"
    echo "ThirdParty CXXFLAGS: $CXXFLAGS"
else
    exportCompiler true     # Normal export for non-NVCC builds
fi

exportLinker            # Linker flags for CMake/configure
useGccFlag $@           # Scan arguments for a '-gcc' option

#------------------------------------------------------------------------------

echo
echo ========================================
echo Start ThirdParty Allwmake
echo ========================================
echo "using:  $CC $CFLAGS"
echo "using:  $CXX $CXXFLAGS"
echo
echo ========================================
echo Build MPI libraries if required
echo "    $MPI_ARCH_PATH"
case "$WM_MPLIB" in
(OPENMPI | MPICH)
    if ! ./make"$WM_MPLIB" -test "$MPI_ARCH_PATH"
    then
        ./make"$WM_MPLIB"
    fi
    ;;
esac


#------------------------------------------------------------------------------

# Treat as optional, but really isn't if anyone wants parallel calculations
./makeSCOTCH || warnBuildIssues SCOTCH

#------------------------------------------------------------------------------
echo
echo ========================================
# Get KAHIP_ARCH_PATH
if settings=$($WM_PROJECT_DIR/bin/foamEtcFile config.sh/kahip)
then
    . $settings
fi
if [ -n "$KAHIP_ARCH_PATH" ]
then
    echo KAHIP decomposition
    ./makeKAHIP -test "$KAHIP_ARCH_PATH" || \
    ./makeKAHIP || warnBuildIssues KAHIP
else
    warnNotFound KAHIP   # is optional
fi

#------------------------------------------------------------------------------
echo
echo ========================================
# Get METIS_ARCH_PATH
if settings=$($WM_PROJECT_DIR/bin/foamEtcFile config.sh/metis)
then
    . $settings
fi
if [ -n "$METIS_ARCH_PATH" ]
then
    echo METIS decomposition
    ./makeMETIS -test "$METIS_ARCH_PATH" || \
    ./makeMETIS || warnBuildIssues METIS
else
    warnNotFound METIS   # is optional
fi

#------------------------------------------------------------------------------
echo
echo ========================================
if [ -n "$CGAL_ARCH_PATH" ]
then
    echo "cgal/boost"
    ./makeCGAL -test "$CGAL_ARCH_PATH" "$BOOST_ARCH_PATH" || \
    ./makeCGAL || warnBuildIssues CGAL
else
    warnNotFound CGAL   # is optional
fi

#------------------------------------------------------------------------------
echo
echo ========================================
if [ -n "$FFTW_ARCH_PATH" ]
then
    echo FFTW
    ./makeFFTW -test "$FFTW_ARCH_PATH" || \
    ./makeFFTW || warnBuildIssues FFTW
else
    warnNotFound FFTW   # is optional
fi

#------------------------------------------------------------------------------
echo
echo ========================================
# Get ADIOS2_ARCH_PATH
if settings=$($WM_PROJECT_DIR/bin/foamEtcFile config.sh/adios2)
then
    . $settings
fi
if [ -n "$ADIOS2_ARCH_PATH" ]
then
    echo ADIOS2
    ./makeAdios2 -test "$ADIOS2_ARCH_PATH" || \
    ./makeAdios2 || warnBuildIssues ADIOS2
else
    warnNotFound ADIOS2   # is optional
fi


#------------------------------------------------------------------------------

echo
echo ========================================
echo Done ThirdParty Allwmake
echo ========================================
echo

#------------------------------------------------------------------------------
